// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: jobs/v1/job.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	v1 "github.com/videocoin/cloud-api/profiles/v1"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type JobStatus int32

const (
	JobStatusNone       JobStatus = 0
	JobStatusNew        JobStatus = 1
	JobStatusPending    JobStatus = 2
	JobStatusProcessing JobStatus = 3
	JobStatusReady      JobStatus = 4
	JobStatusCompleted  JobStatus = 5
	JobStatusCancelled  JobStatus = 6
	JobStatusFailed     JobStatus = 7
)

var JobStatus_name = map[int32]string{
	0: "JOB_STATUS_NONE",
	1: "JOB_STATUS_NEW",
	2: "JOB_STATUS_PENDING",
	3: "JOB_STATUS_PROCESSING",
	4: "JOB_STATUS_READY",
	5: "JOB_STATUS_COMPLETED",
	6: "JOB_STATUS_CANCELLED",
	7: "JOB_STATUS_FAILED",
}

var JobStatus_value = map[string]int32{
	"JOB_STATUS_NONE":       0,
	"JOB_STATUS_NEW":        1,
	"JOB_STATUS_PENDING":    2,
	"JOB_STATUS_PROCESSING": 3,
	"JOB_STATUS_READY":      4,
	"JOB_STATUS_COMPLETED":  5,
	"JOB_STATUS_CANCELLED":  6,
	"JOB_STATUS_FAILED":     7,
}

func (x JobStatus) String() string {
	return proto.EnumName(JobStatus_name, int32(x))
}

func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_15490ce4d3144cc2, []int{0}
}

type InputStatus int32

const (
	InputStatusNone    InputStatus = 0
	InputStatusPending InputStatus = 1
	InputStatusActive  InputStatus = 2
	InputStatusError   InputStatus = 3
)

var InputStatus_name = map[int32]string{
	0: "INPUT_STATUS_NONE",
	1: "INPUT_STATUS_PENDING",
	2: "INPUT_STATUS_ACTIVE",
	3: "INPUT_STATUS_ERROR",
}

var InputStatus_value = map[string]int32{
	"INPUT_STATUS_NONE":    0,
	"INPUT_STATUS_PENDING": 1,
	"INPUT_STATUS_ACTIVE":  2,
	"INPUT_STATUS_ERROR":   3,
}

func (x InputStatus) String() string {
	return proto.EnumName(InputStatus_name, int32(x))
}

func (InputStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_15490ce4d3144cc2, []int{1}
}

type Job struct {
	Id                   string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"type:char(36);"`
	Chunks               []byte       `protobuf:"bytes,2,opt,name=chunks,proto3" json:"chunks,omitempty" gorm:"chunks;type:json"sql:"type:json"`
	Worker               []byte       `protobuf:"bytes,3,opt,name=worker,proto3" json:"worker,omitempty" gorm:"worker;type:binary(32);DEFAULT:NULL"sql:"type:binary(32);DEFAULT:null"`
	PipelineId           string       `protobuf:"bytes,4,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	TranscoderId         string       `protobuf:"bytes,5,opt,name=transcoder_id,json=transcoderId,proto3" json:"transcoder_id,omitempty"`
	ProfileId            v1.ProfileId `protobuf:"varint,6,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	ClientAddress        string       `protobuf:"bytes,7,opt,name=client_address,json=clientAddress,proto3" json:"client_address,omitempty"`
	StreamAddress        string       `protobuf:"bytes,8,opt,name=stream_address,json=streamAddress,proto3" json:"stream_address,omitempty"`
	StreamId             int64        `protobuf:"varint,9,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	TranscodeInputUrl    string       `protobuf:"bytes,10,opt,name=transcode_input_url,json=transcodeInputUrl,proto3" json:"transcode_input_url,omitempty"`
	IngestInputUrl       string       `protobuf:"bytes,11,opt,name=ingest_input_url,json=ingestInputUrl,proto3" json:"ingest_input_url,omitempty"`
	TranscodeOutputUrl   string       `protobuf:"bytes,12,opt,name=transcode_output_url,json=transcodeOutputUrl,proto3" json:"transcode_output_url,omitempty"`
	Status               JobStatus    `protobuf:"varint,13,opt,name=status,proto3,enum=cloud.api.jobs.v1.JobStatus" json:"status,omitempty"`
	CreatedAt            int64        `protobuf:"varint,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Refunded             bool         `protobuf:"varint,16,opt,name=refunded,proto3" json:"refunded,omitempty"`
	InputStatus          InputStatus  `protobuf:"varint,17,opt,name=input_status,json=inputStatus,proto3,enum=cloud.api.jobs.v1.InputStatus" json:"input_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_15490ce4d3144cc2, []int{0}
}
func (m *Job) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Job.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return m.Size()
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetChunks() []byte {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func (m *Job) GetWorker() []byte {
	if m != nil {
		return m.Worker
	}
	return nil
}

func (m *Job) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *Job) GetTranscoderId() string {
	if m != nil {
		return m.TranscoderId
	}
	return ""
}

func (m *Job) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

func (m *Job) GetClientAddress() string {
	if m != nil {
		return m.ClientAddress
	}
	return ""
}

func (m *Job) GetStreamAddress() string {
	if m != nil {
		return m.StreamAddress
	}
	return ""
}

func (m *Job) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *Job) GetTranscodeInputUrl() string {
	if m != nil {
		return m.TranscodeInputUrl
	}
	return ""
}

func (m *Job) GetIngestInputUrl() string {
	if m != nil {
		return m.IngestInputUrl
	}
	return ""
}

func (m *Job) GetTranscodeOutputUrl() string {
	if m != nil {
		return m.TranscodeOutputUrl
	}
	return ""
}

func (m *Job) GetStatus() JobStatus {
	if m != nil {
		return m.Status
	}
	return JobStatusNone
}

func (m *Job) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Job) GetRefunded() bool {
	if m != nil {
		return m.Refunded
	}
	return false
}

func (m *Job) GetInputStatus() InputStatus {
	if m != nil {
		return m.InputStatus
	}
	return InputStatusNone
}

func (*Job) XXX_MessageName() string {
	return "cloud.api.jobs.v1.Job"
}

type JobProfile struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PipelineId           string      `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	IngestInputUrl       string      `protobuf:"bytes,4,opt,name=ingest_input_url,json=ingestInputUrl,proto3" json:"ingest_input_url,omitempty"`
	TranscodeOutputUrl   string      `protobuf:"bytes,5,opt,name=transcode_output_url,json=transcodeOutputUrl,proto3" json:"transcode_output_url,omitempty"`
	StreamId             int64       `protobuf:"varint,7,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	StreamAddress        string      `protobuf:"bytes,8,opt,name=stream_address,json=streamAddress,proto3" json:"stream_address,omitempty"`
	Status               JobStatus   `protobuf:"varint,9,opt,name=status,proto3,enum=cloud.api.jobs.v1.JobStatus" json:"status,omitempty"`
	InputStatus          InputStatus `protobuf:"varint,10,opt,name=input_status,json=inputStatus,proto3,enum=cloud.api.jobs.v1.InputStatus" json:"input_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *JobProfile) Reset()         { *m = JobProfile{} }
func (m *JobProfile) String() string { return proto.CompactTextString(m) }
func (*JobProfile) ProtoMessage()    {}
func (*JobProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_15490ce4d3144cc2, []int{1}
}
func (m *JobProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobProfile.Merge(m, src)
}
func (m *JobProfile) XXX_Size() int {
	return m.Size()
}
func (m *JobProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_JobProfile.DiscardUnknown(m)
}

var xxx_messageInfo_JobProfile proto.InternalMessageInfo

func (m *JobProfile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobProfile) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *JobProfile) GetIngestInputUrl() string {
	if m != nil {
		return m.IngestInputUrl
	}
	return ""
}

func (m *JobProfile) GetTranscodeOutputUrl() string {
	if m != nil {
		return m.TranscodeOutputUrl
	}
	return ""
}

func (m *JobProfile) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *JobProfile) GetStreamAddress() string {
	if m != nil {
		return m.StreamAddress
	}
	return ""
}

func (m *JobProfile) GetStatus() JobStatus {
	if m != nil {
		return m.Status
	}
	return JobStatusNone
}

func (m *JobProfile) GetInputStatus() InputStatus {
	if m != nil {
		return m.InputStatus
	}
	return InputStatusNone
}

func (*JobProfile) XXX_MessageName() string {
	return "cloud.api.jobs.v1.JobProfile"
}

type JobProfiles struct {
	JobProfiles          []*JobProfile `protobuf:"bytes,1,rep,name=job_profiles,json=jobProfiles,proto3" json:"job_profiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *JobProfiles) Reset()         { *m = JobProfiles{} }
func (m *JobProfiles) String() string { return proto.CompactTextString(m) }
func (*JobProfiles) ProtoMessage()    {}
func (*JobProfiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_15490ce4d3144cc2, []int{2}
}
func (m *JobProfiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobProfiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobProfiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobProfiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobProfiles.Merge(m, src)
}
func (m *JobProfiles) XXX_Size() int {
	return m.Size()
}
func (m *JobProfiles) XXX_DiscardUnknown() {
	xxx_messageInfo_JobProfiles.DiscardUnknown(m)
}

var xxx_messageInfo_JobProfiles proto.InternalMessageInfo

func (m *JobProfiles) GetJobProfiles() []*JobProfile {
	if m != nil {
		return m.JobProfiles
	}
	return nil
}

func (*JobProfiles) XXX_MessageName() string {
	return "cloud.api.jobs.v1.JobProfiles"
}
func init() {
	proto.RegisterEnum("cloud.api.jobs.v1.JobStatus", JobStatus_name, JobStatus_value)
	golang_proto.RegisterEnum("cloud.api.jobs.v1.JobStatus", JobStatus_name, JobStatus_value)
	proto.RegisterEnum("cloud.api.jobs.v1.InputStatus", InputStatus_name, InputStatus_value)
	golang_proto.RegisterEnum("cloud.api.jobs.v1.InputStatus", InputStatus_name, InputStatus_value)
	proto.RegisterType((*Job)(nil), "cloud.api.jobs.v1.Job")
	golang_proto.RegisterType((*Job)(nil), "cloud.api.jobs.v1.Job")
	proto.RegisterType((*JobProfile)(nil), "cloud.api.jobs.v1.JobProfile")
	golang_proto.RegisterType((*JobProfile)(nil), "cloud.api.jobs.v1.JobProfile")
	proto.RegisterType((*JobProfiles)(nil), "cloud.api.jobs.v1.JobProfiles")
	golang_proto.RegisterType((*JobProfiles)(nil), "cloud.api.jobs.v1.JobProfiles")
}

func init() { proto.RegisterFile("jobs/v1/job.proto", fileDescriptor_15490ce4d3144cc2) }
func init() { golang_proto.RegisterFile("jobs/v1/job.proto", fileDescriptor_15490ce4d3144cc2) }

var fileDescriptor_15490ce4d3144cc2 = []byte{
	// 964 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcf, 0x6e, 0xe3, 0x44,
	0x1c, 0xc7, 0xd7, 0x49, 0x9b, 0x36, 0x93, 0x34, 0xeb, 0x4c, 0x5b, 0x30, 0x86, 0x4d, 0xad, 0x00,
	0x2b, 0xb7, 0x62, 0xdd, 0x6d, 0x8b, 0x90, 0x68, 0x0f, 0xe0, 0xb6, 0x2e, 0x4a, 0x15, 0x92, 0xc8,
	0x49, 0x40, 0x70, 0x89, 0x6c, 0xcf, 0x34, 0x9d, 0xac, 0xeb, 0x09, 0xfe, 0x93, 0x55, 0xdf, 0x60,
	0x95, 0x13, 0x2f, 0x90, 0x13, 0x3c, 0x05, 0x27, 0x8e, 0x7b, 0xe4, 0xc4, 0xb1, 0x42, 0xdd, 0x37,
	0xe8, 0x13, 0x20, 0x8f, 0x1d, 0xdb, 0xcd, 0x16, 0x89, 0xde, 0x66, 0x7e, 0xf3, 0xf9, 0x7e, 0x67,
	0xe6, 0xfb, 0x1b, 0xcb, 0xa0, 0x3a, 0xa2, 0xa6, 0xb7, 0x3b, 0xd9, 0xdb, 0x1d, 0x51, 0x53, 0x19,
	0xbb, 0xd4, 0xa7, 0xb0, 0x6a, 0xd9, 0x34, 0x40, 0x8a, 0x31, 0x26, 0x4a, 0xb8, 0xa8, 0x4c, 0xf6,
	0xc4, 0x17, 0x43, 0xe2, 0x5f, 0x06, 0xa6, 0x62, 0xd1, 0xab, 0xdd, 0x21, 0x1d, 0xd2, 0x5d, 0x46,
	0x9a, 0xc1, 0x05, 0x9b, 0xb1, 0x09, 0x1b, 0x45, 0x0e, 0xe2, 0xd7, 0x19, 0x7c, 0x42, 0x10, 0xa6,
	0x16, 0x25, 0xce, 0x2e, 0xb3, 0x7d, 0x61, 0x8c, 0x49, 0xa8, 0xbe, 0x20, 0x36, 0x66, 0xfb, 0xce,
	0xc7, 0x91, 0xb4, 0xfe, 0x6b, 0x01, 0xe4, 0xcf, 0xa9, 0x09, 0xb7, 0x41, 0x8e, 0x20, 0x81, 0x93,
	0x38, 0xb9, 0x78, 0xfc, 0xd1, 0xdd, 0xcd, 0xd6, 0xe6, 0x90, 0xba, 0x57, 0x87, 0x75, 0xff, 0x7a,
	0x8c, 0x0f, 0xad, 0x4b, 0xc3, 0x95, 0x0f, 0xbe, 0xda, 0x3e, 0xaa, 0xeb, 0x39, 0x82, 0xe0, 0x31,
	0x28, 0x58, 0x97, 0x81, 0xf3, 0xca, 0x13, 0x72, 0x12, 0x27, 0x97, 0x8f, 0x77, 0xee, 0x6e, 0xb6,
	0x9e, 0x47, 0x78, 0x54, 0x3f, 0x62, 0xaa, 0x91, 0x47, 0x9d, 0xba, 0xf7, 0x8b, 0x1d, 0x9b, 0xb0,
	0xa9, 0x1e, 0x2b, 0xe1, 0x25, 0x28, 0xbc, 0xa6, 0xee, 0x2b, 0xec, 0x0a, 0x79, 0xe6, 0xd1, 0xb9,
	0xbb, 0xd9, 0x6a, 0x46, 0x1e, 0x51, 0x3d, 0xf2, 0x30, 0x89, 0x63, 0xb8, 0xd7, 0xf2, 0xc1, 0xfe,
	0xf6, 0xd1, 0xa9, 0x76, 0xa6, 0xf6, 0x9b, 0xbd, 0xc3, 0x56, 0xbf, 0xd9, 0xcc, 0xd8, 0x3e, 0x40,
	0x38, 0x81, 0x6d, 0xd7, 0xf5, 0xd8, 0x1f, 0x6e, 0x81, 0xd2, 0x98, 0x8c, 0xb1, 0x4d, 0x1c, 0x3c,
	0x20, 0x48, 0x58, 0x0a, 0x6f, 0xa8, 0x83, 0x79, 0xa9, 0x81, 0xe0, 0xa7, 0x60, 0xcd, 0x77, 0x0d,
	0xc7, 0xb3, 0x28, 0xc2, 0x6e, 0x88, 0x2c, 0x33, 0xa4, 0x9c, 0x16, 0x1b, 0x08, 0x7e, 0x03, 0x40,
	0x1c, 0x5c, 0x48, 0x14, 0x24, 0x4e, 0xae, 0xec, 0x4b, 0x4a, 0xda, 0xb8, 0x24, 0xd5, 0xc9, 0x9e,
	0xd2, 0x89, 0xc6, 0x0d, 0xa4, 0x17, 0xc7, 0xf3, 0x21, 0xfc, 0x1c, 0x54, 0x2c, 0x9b, 0x60, 0xc7,
	0x1f, 0x18, 0x08, 0xb9, 0xd8, 0xf3, 0x84, 0x15, 0xb6, 0xcd, 0x5a, 0x54, 0x55, 0xa3, 0x62, 0x88,
	0x79, 0xbe, 0x8b, 0x8d, 0xab, 0x04, 0x5b, 0x8d, 0xb0, 0xa8, 0x3a, 0xc7, 0x3e, 0x06, 0xc5, 0x18,
	0x23, 0x48, 0x28, 0x4a, 0x9c, 0x9c, 0xd7, 0x57, 0xa3, 0x42, 0x03, 0x41, 0x05, 0xac, 0x27, 0x67,
	0x1f, 0x10, 0x67, 0x1c, 0xf8, 0x83, 0xc0, 0xb5, 0x05, 0xc0, 0x8c, 0xaa, 0xc9, 0x52, 0x23, 0x5c,
	0xe9, 0xbb, 0x36, 0x94, 0x01, 0x4f, 0x9c, 0x21, 0xf6, 0xfc, 0x0c, 0x5c, 0x62, 0x70, 0x25, 0xaa,
	0x27, 0xe4, 0x4b, 0xb0, 0x91, 0x3a, 0xd3, 0xc0, 0x9f, 0xd3, 0x65, 0x46, 0xc3, 0x64, 0xad, 0xcd,
	0x96, 0x42, 0xc5, 0x97, 0xa0, 0xe0, 0xf9, 0x86, 0x1f, 0x78, 0xc2, 0x1a, 0xcb, 0xec, 0x13, 0xe5,
	0xbd, 0xc7, 0xae, 0x9c, 0x53, 0xb3, 0xcb, 0x18, 0x3d, 0x66, 0xe1, 0x33, 0x00, 0x2c, 0x17, 0x1b,
	0x3e, 0x46, 0x03, 0xc3, 0x17, 0x2a, 0xec, 0x7e, 0xc5, 0xb8, 0xa2, 0xfa, 0x50, 0x04, 0xab, 0x2e,
	0xbe, 0x08, 0x1c, 0x84, 0x91, 0xc0, 0x4b, 0x9c, 0xbc, 0xaa, 0x27, 0x73, 0xa8, 0x82, 0x72, 0x74,
	0x8b, 0x78, 0xdb, 0x2a, 0xdb, 0xb6, 0xf6, 0xc0, 0xb6, 0xec, 0x56, 0xf1, 0xc6, 0x25, 0x92, 0x4e,
	0xea, 0x7f, 0xe7, 0x00, 0x38, 0xa7, 0x66, 0xdc, 0x46, 0x58, 0x49, 0xbf, 0x0c, 0xf6, 0xfc, 0x17,
	0x1e, 0x54, 0xee, 0xbd, 0x07, 0xf5, 0x50, 0x9e, 0x4b, 0x8f, 0xca, 0x73, 0xf9, 0x3f, 0xf3, 0xbc,
	0xd7, 0xf8, 0x95, 0x85, 0xc6, 0xff, 0xcf, 0xc7, 0x93, 0xf6, 0xa4, 0xf8, 0x88, 0x9e, 0x2c, 0x06,
	0x0b, 0x1e, 0x1f, 0x6c, 0x1b, 0x94, 0xd2, 0x5c, 0x3d, 0xf8, 0x2d, 0x28, 0x8f, 0xa8, 0x39, 0x98,
	0x7f, 0x3a, 0x02, 0x27, 0xe5, 0xe5, 0xd2, 0xfe, 0xb3, 0x87, 0x4f, 0x13, 0xab, 0xf4, 0xd2, 0x28,
	0x75, 0xd8, 0x79, 0x93, 0x07, 0xc5, 0xe4, 0xa4, 0xf0, 0x39, 0x78, 0x7a, 0xde, 0x3e, 0x1e, 0x74,
	0x7b, 0x6a, 0xaf, 0xdf, 0x1d, 0xb4, 0xda, 0x2d, 0x8d, 0x7f, 0x22, 0x56, 0xa7, 0x33, 0x69, 0x2d,
	0x61, 0x5a, 0xd4, 0xc1, 0xf0, 0x33, 0x50, 0xc9, 0x72, 0xda, 0x8f, 0x3c, 0x27, 0xf2, 0xd3, 0x99,
	0x54, 0x4e, 0x31, 0xfc, 0x1a, 0x7e, 0x01, 0x60, 0x86, 0xea, 0x68, 0xad, 0xd3, 0x46, 0xeb, 0x3b,
	0x3e, 0x27, 0x6e, 0x4c, 0x67, 0x12, 0x9f, 0x90, 0x1d, 0xec, 0x20, 0xe2, 0x0c, 0xe1, 0x3e, 0xd8,
	0xcc, 0xd2, 0x7a, 0xfb, 0x44, 0xeb, 0x76, 0x43, 0x41, 0x5e, 0xfc, 0x70, 0x3a, 0x93, 0xd6, 0x53,
	0x81, 0x4b, 0x2d, 0xec, 0x79, 0xa1, 0x46, 0x06, 0x7c, 0x46, 0xa3, 0x6b, 0xea, 0xe9, 0x4f, 0xfc,
	0x92, 0x08, 0xa7, 0x33, 0xa9, 0x92, 0xc6, 0x8f, 0x0d, 0x74, 0x1d, 0xbe, 0x93, 0x0c, 0x79, 0xd2,
	0xfe, 0xbe, 0xd3, 0xd4, 0x7a, 0xda, 0x29, 0xbf, 0x2c, 0x7e, 0x30, 0x9d, 0x49, 0x30, 0xa1, 0x4f,
	0xe8, 0xd5, 0xd8, 0xc6, 0x3e, 0x46, 0x8b, 0x0a, 0xb5, 0x75, 0xa2, 0x35, 0x9b, 0xda, 0x29, 0x5f,
	0x58, 0x54, 0x18, 0x8e, 0x85, 0x6d, 0x1b, 0x23, 0xb8, 0x03, 0xaa, 0x19, 0xc5, 0x99, 0xda, 0x08,
	0xf1, 0x15, 0x71, 0x7d, 0x3a, 0x93, 0x9e, 0x26, 0xf8, 0x99, 0x41, 0x6c, 0x8c, 0xc4, 0xea, 0x9b,
	0xdf, 0x6a, 0x4f, 0xfe, 0xf8, 0xbd, 0x96, 0x86, 0xbf, 0x73, 0xc3, 0x81, 0x52, 0xa6, 0xf1, 0xa1,
	0x5d, 0xa3, 0xd5, 0xe9, 0xf7, 0x16, 0xda, 0xc1, 0xec, 0x32, 0x1c, 0x6b, 0xc8, 0x4b, 0xb0, 0x71,
	0x8f, 0x9d, 0x87, 0xcd, 0x45, 0x87, 0xcd, 0xe0, 0xf3, 0xb8, 0x15, 0xb0, 0x7e, 0x4f, 0xa1, 0x9e,
	0xf4, 0x1a, 0x3f, 0x68, 0x7c, 0x4e, 0xdc, 0x9c, 0xce, 0xa4, 0x6a, 0x46, 0xa0, 0x5a, 0x3e, 0x99,
	0xe0, 0xb0, 0x99, 0xf7, 0x78, 0x4d, 0xd7, 0xdb, 0x3a, 0x9f, 0x8f, 0x9a, 0x99, 0xc1, 0x35, 0xd7,
	0xa5, 0xae, 0xb8, 0x1e, 0x5f, 0x2f, 0x7b, 0xa1, 0x63, 0xe1, 0xed, 0x6d, 0x8d, 0xfb, 0xeb, 0xb6,
	0xc6, 0xfd, 0x73, 0x5b, 0xe3, 0xfe, 0x7c, 0x57, 0xe3, 0xde, 0xbe, 0xab, 0x71, 0x3f, 0xe7, 0x26,
	0x7b, 0x66, 0x81, 0xfd, 0x49, 0x0f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x24, 0x63, 0xb1,
	0xdb, 0x07, 0x00, 0x00,
}

func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Chunks) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Chunks)))
		i += copy(dAtA[i:], m.Chunks)
	}
	if len(m.Worker) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Worker)))
		i += copy(dAtA[i:], m.Worker)
	}
	if len(m.PipelineId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.PipelineId)))
		i += copy(dAtA[i:], m.PipelineId)
	}
	if len(m.TranscoderId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.TranscoderId)))
		i += copy(dAtA[i:], m.TranscoderId)
	}
	if m.ProfileId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.ProfileId))
	}
	if len(m.ClientAddress) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.ClientAddress)))
		i += copy(dAtA[i:], m.ClientAddress)
	}
	if len(m.StreamAddress) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.StreamAddress)))
		i += copy(dAtA[i:], m.StreamAddress)
	}
	if m.StreamId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.StreamId))
	}
	if len(m.TranscodeInputUrl) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.TranscodeInputUrl)))
		i += copy(dAtA[i:], m.TranscodeInputUrl)
	}
	if len(m.IngestInputUrl) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.IngestInputUrl)))
		i += copy(dAtA[i:], m.IngestInputUrl)
	}
	if len(m.TranscodeOutputUrl) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.TranscodeOutputUrl)))
		i += copy(dAtA[i:], m.TranscodeOutputUrl)
	}
	if m.Status != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.CreatedAt))
	}
	if m.Refunded {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.Refunded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InputStatus != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.InputStatus))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JobProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.PipelineId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.PipelineId)))
		i += copy(dAtA[i:], m.PipelineId)
	}
	if len(m.IngestInputUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.IngestInputUrl)))
		i += copy(dAtA[i:], m.IngestInputUrl)
	}
	if len(m.TranscodeOutputUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.TranscodeOutputUrl)))
		i += copy(dAtA[i:], m.TranscodeOutputUrl)
	}
	if m.StreamId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.StreamId))
	}
	if len(m.StreamAddress) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.StreamAddress)))
		i += copy(dAtA[i:], m.StreamAddress)
	}
	if m.Status != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.Status))
	}
	if m.InputStatus != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.InputStatus))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JobProfiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobProfiles) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobProfiles) > 0 {
		for _, msg := range m.JobProfiles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintJob(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintJob(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Job) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Chunks)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.PipelineId)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.TranscoderId)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.ProfileId != 0 {
		n += 1 + sovJob(uint64(m.ProfileId))
	}
	l = len(m.ClientAddress)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.StreamAddress)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.StreamId != 0 {
		n += 1 + sovJob(uint64(m.StreamId))
	}
	l = len(m.TranscodeInputUrl)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.IngestInputUrl)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.TranscodeOutputUrl)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovJob(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovJob(uint64(m.CreatedAt))
	}
	if m.Refunded {
		n += 3
	}
	if m.InputStatus != 0 {
		n += 2 + sovJob(uint64(m.InputStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.PipelineId)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.IngestInputUrl)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.TranscodeOutputUrl)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.StreamId != 0 {
		n += 1 + sovJob(uint64(m.StreamId))
	}
	l = len(m.StreamAddress)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovJob(uint64(m.Status))
	}
	if m.InputStatus != 0 {
		n += 1 + sovJob(uint64(m.InputStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobProfiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JobProfiles) > 0 {
		for _, e := range m.JobProfiles {
			l = e.Size()
			n += 1 + l + sovJob(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovJob(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozJob(x uint64) (n int) {
	return sovJob(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunks = append(m.Chunks[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunks == nil {
				m.Chunks = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = append(m.Worker[:0], dAtA[iNdEx:postIndex]...)
			if m.Worker == nil {
				m.Worker = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PipelineId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscoderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranscoderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			m.ProfileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileId |= (v1.ProfileId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscodeInputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranscodeInputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngestInputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngestInputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscodeOutputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranscodeOutputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (JobStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refunded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Refunded = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStatus", wireType)
			}
			m.InputStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputStatus |= (InputStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PipelineId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngestInputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngestInputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscodeOutputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranscodeOutputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (JobStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStatus", wireType)
			}
			m.InputStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputStatus |= (InputStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobProfiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobProfiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobProfiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobProfiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobProfiles = append(m.JobProfiles, &JobProfile{})
			if err := m.JobProfiles[len(m.JobProfiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJob(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJob
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthJob
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowJob
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipJob(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthJob = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJob   = fmt.Errorf("proto: integer overflow")
)

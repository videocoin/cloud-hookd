// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: manager/v1/manager.proto

package v1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	v12 "github.com/videocoin/cloud-api/jobs/v1"
	v1 "github.com/videocoin/cloud-api/profiles/v1"
	rpc "github.com/videocoin/cloud-api/rpc"
	v11 "github.com/videocoin/cloud-api/transcoder/v1"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ProfileRequest struct {
	ProfileId            v1.ProfileId `protobuf:"varint,2,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ProfileRequest) Reset()         { *m = ProfileRequest{} }
func (m *ProfileRequest) String() string { return proto.CompactTextString(m) }
func (*ProfileRequest) ProtoMessage()    {}
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{0}
}
func (m *ProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileRequest.Merge(m, src)
}
func (m *ProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileRequest proto.InternalMessageInfo

func (m *ProfileRequest) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

func (*ProfileRequest) XXX_MessageName() string {
	return "cloud.api.manager.v1.ProfileRequest"
}

type CheckBalanceRequest struct {
	ContractAddress      string   `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckBalanceRequest) Reset()         { *m = CheckBalanceRequest{} }
func (m *CheckBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*CheckBalanceRequest) ProtoMessage()    {}
func (*CheckBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{1}
}
func (m *CheckBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckBalanceRequest.Merge(m, src)
}
func (m *CheckBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckBalanceRequest proto.InternalMessageInfo

func (m *CheckBalanceRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (*CheckBalanceRequest) XXX_MessageName() string {
	return "cloud.api.manager.v1.CheckBalanceRequest"
}

type CheckBalanceResponse struct {
	Balance              float64  `protobuf:"fixed64,1,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckBalanceResponse) Reset()         { *m = CheckBalanceResponse{} }
func (m *CheckBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*CheckBalanceResponse) ProtoMessage()    {}
func (*CheckBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{2}
}
func (m *CheckBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckBalanceResponse.Merge(m, src)
}
func (m *CheckBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckBalanceResponse proto.InternalMessageInfo

func (m *CheckBalanceResponse) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (*CheckBalanceResponse) XXX_MessageName() string {
	return "cloud.api.manager.v1.CheckBalanceResponse"
}

type ContractAddrRequest struct {
	PipelineId           string   `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	ContractAddress      string   `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContractAddrRequest) Reset()         { *m = ContractAddrRequest{} }
func (m *ContractAddrRequest) String() string { return proto.CompactTextString(m) }
func (*ContractAddrRequest) ProtoMessage()    {}
func (*ContractAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{3}
}
func (m *ContractAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractAddrRequest.Merge(m, src)
}
func (m *ContractAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContractAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractAddrRequest proto.InternalMessageInfo

func (m *ContractAddrRequest) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *ContractAddrRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (*ContractAddrRequest) XXX_MessageName() string {
	return "cloud.api.manager.v1.ContractAddrRequest"
}

type VerifyChunkRequest struct {
	StreamId             int64    `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SourceChunkId        uint64   `protobuf:"varint,2,opt,name=source_chunk_id,json=sourceChunkId,proto3" json:"source_chunk_id,omitempty"`
	ResultChunkId        uint64   `protobuf:"varint,3,opt,name=result_chunk_id,json=resultChunkId,proto3" json:"result_chunk_id,omitempty"`
	HashDistance         int32    `protobuf:"varint,4,opt,name=hash_distance,json=hashDistance,proto3" json:"hash_distance,omitempty"`
	Bitrate              uint32   `protobuf:"varint,5,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyChunkRequest) Reset()         { *m = VerifyChunkRequest{} }
func (m *VerifyChunkRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyChunkRequest) ProtoMessage()    {}
func (*VerifyChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{4}
}
func (m *VerifyChunkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyChunkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyChunkRequest.Merge(m, src)
}
func (m *VerifyChunkRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyChunkRequest proto.InternalMessageInfo

func (m *VerifyChunkRequest) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *VerifyChunkRequest) GetSourceChunkId() uint64 {
	if m != nil {
		return m.SourceChunkId
	}
	return 0
}

func (m *VerifyChunkRequest) GetResultChunkId() uint64 {
	if m != nil {
		return m.ResultChunkId
	}
	return 0
}

func (m *VerifyChunkRequest) GetHashDistance() int32 {
	if m != nil {
		return m.HashDistance
	}
	return 0
}

func (m *VerifyChunkRequest) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (*VerifyChunkRequest) XXX_MessageName() string {
	return "cloud.api.manager.v1.VerifyChunkRequest"
}

type ChunkCreatedRequest struct {
	StreamId             int64    `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SourceChunkId        int64    `protobuf:"varint,2,opt,name=source_chunk_id,json=sourceChunkId,proto3" json:"source_chunk_id,omitempty"`
	ResultChunkId        int64    `protobuf:"varint,3,opt,name=result_chunk_id,json=resultChunkId,proto3" json:"result_chunk_id,omitempty"`
	Bitrate              uint32   `protobuf:"varint,4,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkCreatedRequest) Reset()         { *m = ChunkCreatedRequest{} }
func (m *ChunkCreatedRequest) String() string { return proto.CompactTextString(m) }
func (*ChunkCreatedRequest) ProtoMessage()    {}
func (*ChunkCreatedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{5}
}
func (m *ChunkCreatedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkCreatedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkCreatedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkCreatedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkCreatedRequest.Merge(m, src)
}
func (m *ChunkCreatedRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChunkCreatedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkCreatedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkCreatedRequest proto.InternalMessageInfo

func (m *ChunkCreatedRequest) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *ChunkCreatedRequest) GetSourceChunkId() int64 {
	if m != nil {
		return m.SourceChunkId
	}
	return 0
}

func (m *ChunkCreatedRequest) GetResultChunkId() int64 {
	if m != nil {
		return m.ResultChunkId
	}
	return 0
}

func (m *ChunkCreatedRequest) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (*ChunkCreatedRequest) XXX_MessageName() string {
	return "cloud.api.manager.v1.ChunkCreatedRequest"
}

type TranscoderStatusRequest struct {
	TranscoderId         string               `protobuf:"bytes,1,opt,name=transcoder_id,json=transcoderId,proto3" json:"transcoder_id,omitempty"`
	Status               v11.TranscoderStatus `protobuf:"varint,2,opt,name=status,proto3,enum=cloud.api.transcoder.v1.TranscoderStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TranscoderStatusRequest) Reset()         { *m = TranscoderStatusRequest{} }
func (m *TranscoderStatusRequest) String() string { return proto.CompactTextString(m) }
func (*TranscoderStatusRequest) ProtoMessage()    {}
func (*TranscoderStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{6}
}
func (m *TranscoderStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TranscoderStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TranscoderStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TranscoderStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranscoderStatusRequest.Merge(m, src)
}
func (m *TranscoderStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *TranscoderStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TranscoderStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TranscoderStatusRequest proto.InternalMessageInfo

func (m *TranscoderStatusRequest) GetTranscoderId() string {
	if m != nil {
		return m.TranscoderId
	}
	return ""
}

func (m *TranscoderStatusRequest) GetStatus() v11.TranscoderStatus {
	if m != nil {
		return m.Status
	}
	return v11.TranscoderStatusAvailable
}

func (*TranscoderStatusRequest) XXX_MessageName() string {
	return "cloud.api.manager.v1.TranscoderStatusRequest"
}

type JobRequest struct {
	Id                   string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProfileId            v1.ProfileId `protobuf:"varint,3,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *JobRequest) Reset()         { *m = JobRequest{} }
func (m *JobRequest) String() string { return proto.CompactTextString(m) }
func (*JobRequest) ProtoMessage()    {}
func (*JobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{7}
}
func (m *JobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobRequest.Merge(m, src)
}
func (m *JobRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobRequest proto.InternalMessageInfo

func (m *JobRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobRequest) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

func (*JobRequest) XXX_MessageName() string {
	return "cloud.api.manager.v1.JobRequest"
}

type UpdateJobRequest struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProfileId            v1.ProfileId    `protobuf:"varint,2,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	ClientAddress        string          `protobuf:"bytes,3,opt,name=client_address,json=clientAddress,proto3" json:"client_address,omitempty"`
	StreamId             int64           `protobuf:"varint,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	StreamAddress        string          `protobuf:"bytes,5,opt,name=stream_address,json=streamAddress,proto3" json:"stream_address,omitempty"`
	Status               v12.JobStatus   `protobuf:"varint,6,opt,name=status,proto3,enum=cloud.api.jobs.v1.JobStatus" json:"status,omitempty"`
	InputStatus          v12.InputStatus `protobuf:"varint,7,opt,name=input_status,json=inputStatus,proto3,enum=cloud.api.jobs.v1.InputStatus" json:"input_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateJobRequest) Reset()         { *m = UpdateJobRequest{} }
func (m *UpdateJobRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateJobRequest) ProtoMessage()    {}
func (*UpdateJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{8}
}
func (m *UpdateJobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateJobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateJobRequest.Merge(m, src)
}
func (m *UpdateJobRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateJobRequest proto.InternalMessageInfo

func (m *UpdateJobRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateJobRequest) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

func (m *UpdateJobRequest) GetClientAddress() string {
	if m != nil {
		return m.ClientAddress
	}
	return ""
}

func (m *UpdateJobRequest) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *UpdateJobRequest) GetStreamAddress() string {
	if m != nil {
		return m.StreamAddress
	}
	return ""
}

func (m *UpdateJobRequest) GetStatus() v12.JobStatus {
	if m != nil {
		return m.Status
	}
	return v12.JobStatusNone
}

func (m *UpdateJobRequest) GetInputStatus() v12.InputStatus {
	if m != nil {
		return m.InputStatus
	}
	return v12.InputStatusNone
}

func (*UpdateJobRequest) XXX_MessageName() string {
	return "cloud.api.manager.v1.UpdateJobRequest"
}
func init() {
	proto.RegisterType((*ProfileRequest)(nil), "cloud.api.manager.v1.ProfileRequest")
	golang_proto.RegisterType((*ProfileRequest)(nil), "cloud.api.manager.v1.ProfileRequest")
	proto.RegisterType((*CheckBalanceRequest)(nil), "cloud.api.manager.v1.CheckBalanceRequest")
	golang_proto.RegisterType((*CheckBalanceRequest)(nil), "cloud.api.manager.v1.CheckBalanceRequest")
	proto.RegisterType((*CheckBalanceResponse)(nil), "cloud.api.manager.v1.CheckBalanceResponse")
	golang_proto.RegisterType((*CheckBalanceResponse)(nil), "cloud.api.manager.v1.CheckBalanceResponse")
	proto.RegisterType((*ContractAddrRequest)(nil), "cloud.api.manager.v1.ContractAddrRequest")
	golang_proto.RegisterType((*ContractAddrRequest)(nil), "cloud.api.manager.v1.ContractAddrRequest")
	proto.RegisterType((*VerifyChunkRequest)(nil), "cloud.api.manager.v1.VerifyChunkRequest")
	golang_proto.RegisterType((*VerifyChunkRequest)(nil), "cloud.api.manager.v1.VerifyChunkRequest")
	proto.RegisterType((*ChunkCreatedRequest)(nil), "cloud.api.manager.v1.ChunkCreatedRequest")
	golang_proto.RegisterType((*ChunkCreatedRequest)(nil), "cloud.api.manager.v1.ChunkCreatedRequest")
	proto.RegisterType((*TranscoderStatusRequest)(nil), "cloud.api.manager.v1.TranscoderStatusRequest")
	golang_proto.RegisterType((*TranscoderStatusRequest)(nil), "cloud.api.manager.v1.TranscoderStatusRequest")
	proto.RegisterType((*JobRequest)(nil), "cloud.api.manager.v1.JobRequest")
	golang_proto.RegisterType((*JobRequest)(nil), "cloud.api.manager.v1.JobRequest")
	proto.RegisterType((*UpdateJobRequest)(nil), "cloud.api.manager.v1.UpdateJobRequest")
	golang_proto.RegisterType((*UpdateJobRequest)(nil), "cloud.api.manager.v1.UpdateJobRequest")
}

func init() { proto.RegisterFile("manager/v1/manager.proto", fileDescriptor_e02ccd723715ff49) }
func init() { golang_proto.RegisterFile("manager/v1/manager.proto", fileDescriptor_e02ccd723715ff49) }

var fileDescriptor_e02ccd723715ff49 = []byte{
	// 1073 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0xc0, 0x41, 0xc9, 0x96, 0xe3, 0xb1, 0x2c, 0x1b, 0x6b, 0x27, 0x51, 0x64, 0x47, 0x11, 0x68,
	0x27, 0xb0, 0x0d, 0x84, 0x8c, 0xf2, 0xff, 0x5f, 0x5a, 0xa0, 0x68, 0x1d, 0xb7, 0x70, 0x15, 0xa0,
	0x68, 0x4b, 0xf7, 0x03, 0x28, 0x5a, 0x28, 0x14, 0xb9, 0x96, 0xd6, 0x92, 0xb8, 0x0c, 0x77, 0xa9,
	0x34, 0x35, 0x7c, 0x68, 0xdf, 0xa0, 0xe8, 0xb5, 0x0f, 0x93, 0x5b, 0x73, 0x2c, 0xd0, 0x17, 0x28,
	0x9c, 0x3e, 0x47, 0x51, 0x70, 0x3f, 0x44, 0xea, 0x2b, 0x56, 0xe0, 0x1b, 0x77, 0x76, 0x66, 0x7e,
	0xb3, 0x33, 0xb3, 0x9c, 0x85, 0x72, 0xdf, 0x0d, 0xdc, 0x36, 0x8e, 0xec, 0x41, 0xdd, 0x56, 0x9f,
	0x56, 0x18, 0x51, 0x4e, 0xd1, 0xa6, 0xd7, 0xa3, 0xb1, 0x6f, 0xb9, 0x21, 0xb1, 0xf4, 0xc6, 0xa0,
	0x5e, 0xb1, 0xdb, 0x84, 0x77, 0xe2, 0x96, 0xe5, 0xd1, 0xbe, 0x3d, 0x20, 0x3e, 0xa6, 0x1e, 0x25,
	0x81, 0x2d, 0x54, 0x1f, 0xba, 0x21, 0xb1, 0xa3, 0xd0, 0xb3, 0x3b, 0xd8, 0xed, 0xf1, 0x8e, 0x74,
	0x53, 0xd9, 0x6a, 0x53, 0xda, 0xee, 0x61, 0x5b, 0xac, 0x5a, 0xf1, 0xa9, 0x8d, 0xfb, 0x21, 0x7f,
	0xa9, 0x36, 0xb7, 0xd5, 0x66, 0x62, 0xe9, 0x06, 0x01, 0xe5, 0x2e, 0x27, 0x34, 0x60, 0x6a, 0xf7,
	0x61, 0x86, 0xd5, 0xa6, 0x6d, 0x9a, 0xfa, 0x48, 0x56, 0x62, 0x21, 0xbe, 0x94, 0xfa, 0x7b, 0x57,
	0x84, 0x16, 0x46, 0xf4, 0x94, 0xf4, 0x30, 0x4b, 0x8e, 0xaa, 0xbf, 0x95, 0xe9, 0xa3, 0x2b, 0x4c,
	0xcf, 0x68, 0x4b, 0x98, 0x9d, 0xd1, 0x96, 0xb2, 0xf8, 0xe0, 0x0a, 0x0b, 0x1e, 0xb9, 0x01, 0xf3,
	0xa8, 0x2f, 0x33, 0x9b, 0xae, 0xa4, 0xb9, 0xf9, 0x25, 0x94, 0xbe, 0x90, 0x21, 0x38, 0xf8, 0x79,
	0x8c, 0x19, 0x47, 0x1f, 0x02, 0xa8, 0xa0, 0x9a, 0xc4, 0x2f, 0xe7, 0x6a, 0xc6, 0x5e, 0xe9, 0x71,
	0xcd, 0x4a, 0x6b, 0x30, 0x8c, 0x78, 0x50, 0xb7, 0x94, 0x69, 0xc3, 0x77, 0x96, 0x43, 0xfd, 0x69,
	0x7e, 0x04, 0x1b, 0x47, 0x1d, 0xec, 0x75, 0x9f, 0xb8, 0x3d, 0x37, 0xf0, 0x86, 0x7e, 0xf7, 0x61,
	0xdd, 0xa3, 0x01, 0x8f, 0x5c, 0x8f, 0x37, 0x5d, 0xdf, 0x8f, 0x30, 0x63, 0x65, 0xa3, 0x66, 0xec,
	0x2d, 0x3b, 0x6b, 0x5a, 0x7e, 0x28, 0xc5, 0xe6, 0x23, 0xd8, 0x1c, 0xf5, 0xc0, 0x42, 0x1a, 0x30,
	0x8c, 0xca, 0xb0, 0xd4, 0x92, 0x22, 0x61, 0x69, 0x38, 0x7a, 0x69, 0xba, 0xb0, 0x71, 0x94, 0x71,
	0xa2, 0x99, 0xf7, 0x60, 0x25, 0x24, 0x21, 0xee, 0x91, 0x40, 0x1c, 0x46, 0xe2, 0x40, 0x8b, 0x1a,
	0xfe, 0xd4, 0xa0, 0x72, 0xd3, 0x83, 0x7a, 0x65, 0x00, 0xfa, 0x06, 0x47, 0xe4, 0xf4, 0xe5, 0x51,
	0x27, 0x0e, 0xba, 0x1a, 0xb1, 0x05, 0xcb, 0x8c, 0x47, 0xd8, 0xed, 0x6b, 0x40, 0xde, 0xb9, 0x21,
	0x05, 0x0d, 0x1f, 0x3d, 0x80, 0x35, 0x46, 0xe3, 0xc8, 0xc3, 0x4d, 0x2f, 0xb1, 0xd1, 0x09, 0x5d,
	0x70, 0x56, 0xa5, 0x58, 0x78, 0x92, 0x7a, 0x11, 0x66, 0x71, 0x8f, 0xa7, 0x7a, 0x79, 0xa9, 0x27,
	0xc5, 0x5a, 0x6f, 0x07, 0x56, 0x3b, 0x2e, 0xeb, 0x34, 0x7d, 0xc2, 0xb8, 0x48, 0xc3, 0x42, 0xcd,
	0xd8, 0x5b, 0x74, 0x8a, 0x89, 0xf0, 0x63, 0x25, 0x13, 0x59, 0x22, 0x3c, 0x72, 0x39, 0x2e, 0x2f,
	0xd6, 0x8c, 0xbd, 0x55, 0x47, 0x2f, 0xcd, 0xdf, 0x8d, 0xa4, 0x34, 0x71, 0xd0, 0x3d, 0x8a, 0xb0,
	0xcb, 0xb1, 0x7f, 0x9d, 0x33, 0xe4, 0xe7, 0x3c, 0x43, 0x7e, 0xfc, 0x0c, 0x99, 0xf0, 0x16, 0x46,
	0xc3, 0xfb, 0xd9, 0x80, 0xdb, 0x5f, 0x0d, 0x1b, 0xf4, 0x84, 0xbb, 0x3c, 0x66, 0x3a, 0xc4, 0x1d,
	0x58, 0x4d, 0x7b, 0x37, 0xad, 0x65, 0x31, 0x15, 0x36, 0x7c, 0x74, 0x08, 0x05, 0x26, 0xac, 0x54,
	0xdb, 0xee, 0x67, 0xda, 0x36, 0xd3, 0xf9, 0x83, 0xba, 0x35, 0x81, 0x51, 0x86, 0xe6, 0x0f, 0x00,
	0x4f, 0x69, 0x4b, 0x53, 0x4b, 0x90, 0x1b, 0xa2, 0x72, 0xc4, 0x1f, 0xbb, 0x1b, 0xf9, 0x77, 0xbf,
	0x1b, 0x7f, 0xe4, 0x60, 0xfd, 0xeb, 0xd0, 0x77, 0x39, 0x9e, 0x9b, 0xf2, 0xee, 0x37, 0x10, 0xdd,
	0x87, 0x92, 0xd7, 0x23, 0x38, 0x48, 0x7b, 0x3a, 0x2f, 0x9c, 0xaf, 0x4a, 0xa9, 0xea, 0xe8, 0xd1,
	0xb2, 0x2f, 0x8c, 0x95, 0xfd, 0x3e, 0x94, 0xd4, 0xa6, 0xf6, 0xb1, 0x28, 0x7d, 0x48, 0xa9, 0xf6,
	0xf1, 0xff, 0x61, 0xca, 0x0b, 0x22, 0xce, 0xed, 0x4c, 0x9c, 0xc9, 0xcf, 0x2a, 0x89, 0xf1, 0x29,
	0x6d, 0x8d, 0x66, 0x19, 0x1d, 0x42, 0x91, 0x04, 0x61, 0xcc, 0x9b, 0xca, 0x76, 0x49, 0xd8, 0x56,
	0xa7, 0xd8, 0x36, 0x12, 0x35, 0x65, 0xbd, 0x42, 0xd2, 0xc5, 0xe3, 0x7f, 0x57, 0xa0, 0xf4, 0x99,
	0x1c, 0x07, 0x27, 0x38, 0x1a, 0x10, 0x0f, 0x23, 0x0c, 0x05, 0xd9, 0xd8, 0x28, 0x9b, 0xad, 0x74,
	0x66, 0x58, 0x69, 0xce, 0x2b, 0x77, 0xa7, 0xc7, 0xa9, 0xd2, 0x69, 0x56, 0x7e, 0xf9, 0xeb, 0x9f,
	0xdf, 0x72, 0x9b, 0xe6, 0x9a, 0x98, 0x08, 0xf2, 0x87, 0x6b, 0x07, 0xf8, 0xc5, 0xfb, 0xc6, 0x01,
	0xf2, 0x21, 0xef, 0xc4, 0xc1, 0xf5, 0x19, 0xdb, 0x82, 0x71, 0xcb, 0xdc, 0xcc, 0x32, 0xce, 0x89,
	0x7f, 0x61, 0x47, 0x71, 0x80, 0x4e, 0x61, 0xe1, 0x84, 0xd3, 0xf0, 0xfa, 0x98, 0xbb, 0x02, 0x73,
	0xdb, 0xbc, 0x39, 0x81, 0x61, 0x89, 0xff, 0x67, 0x90, 0x3f, 0xc6, 0xfc, 0xfa, 0x98, 0xb2, 0xc0,
	0x20, 0xb4, 0x3e, 0x8e, 0x41, 0x3d, 0x28, 0xc8, 0x96, 0x47, 0x0f, 0xa6, 0x43, 0xc6, 0x2f, 0xc4,
	0x55, 0xa8, 0x2d, 0x81, 0xba, 0x59, 0x99, 0x40, 0x25, 0xd5, 0xf9, 0x1c, 0x0a, 0x9f, 0x8a, 0xb1,
	0x8f, 0x6e, 0x59, 0x72, 0xa8, 0x5b, 0x7a, 0x5a, 0x5b, 0x9f, 0x24, 0x13, 0xbf, 0xb2, 0x95, 0xf1,
	0x1e, 0x85, 0x9e, 0x25, 0xd5, 0x65, 0x5b, 0x99, 0xeb, 0xc2, 0x37, 0xa0, 0x1b, 0xea, 0xf1, 0xf0,
	0x13, 0xe2, 0x50, 0x94, 0x01, 0x4a, 0x8d, 0xb9, 0x0f, 0x31, 0x03, 0x6f, 0xee, 0x0a, 0x42, 0xd5,
	0xbc, 0x33, 0x51, 0x8f, 0x73, 0x79, 0x1b, 0xc4, 0x31, 0xce, 0x60, 0x25, 0x33, 0x6c, 0xd0, 0xde,
	0x74, 0xe8, 0xe4, 0x3c, 0x9a, 0x89, 0xbd, 0x23, 0xb0, 0x1b, 0x66, 0x49, 0x63, 0x07, 0xc2, 0x36,
	0x61, 0x31, 0x28, 0x66, 0xa7, 0x02, 0xda, 0x9f, 0x0e, 0x9b, 0x32, 0x39, 0x66, 0xd2, 0x6a, 0x82,
	0x56, 0x49, 0x9b, 0x4e, 0xce, 0x04, 0x4f, 0x5a, 0x27, 0xd0, 0x5f, 0x8d, 0x84, 0x9a, 0x0e, 0xf9,
	0xd9, 0xd4, 0x89, 0xa7, 0x44, 0xe5, 0x60, 0x1e, 0x55, 0xf9, 0x66, 0x30, 0x0f, 0x44, 0x24, 0xbb,
	0xc8, 0xd4, 0x91, 0xa8, 0x27, 0x83, 0x7d, 0x3e, 0x3e, 0xf8, 0x2f, 0xd0, 0x33, 0x58, 0x39, 0xc6,
	0x5c, 0xb5, 0x19, 0x9b, 0xd9, 0x40, 0xf7, 0xde, 0xfe, 0x2f, 0x66, 0x93, 0x77, 0x41, 0x6b, 0xa1,
	0x1f, 0x01, 0x52, 0x02, 0xda, 0x9d, 0x7e, 0x8e, 0xd1, 0x07, 0x59, 0xa5, 0xfa, 0x76, 0x9c, 0x6e,
	0x28, 0xb4, 0x3d, 0x46, 0xb3, 0xcf, 0xd3, 0x29, 0x72, 0x81, 0x9e, 0x03, 0x72, 0x70, 0x9b, 0x30,
	0x8e, 0xa3, 0x74, 0xf8, 0xa1, 0x9d, 0x39, 0x26, 0xe4, 0xcc, 0x22, 0x57, 0x05, 0xb8, 0x6c, 0x6e,
	0x68, 0x70, 0xea, 0x81, 0x25, 0x25, 0xfe, 0x1e, 0x96, 0x8e, 0x31, 0xff, 0x96, 0x46, 0xdd, 0x99,
	0xa9, 0x9c, 0xcd, 0x3f, 0x64, 0x8c, 0xb4, 0x83, 0x3e, 0x0e, 0xb8, 0xb9, 0x29, 0x38, 0x25, 0x54,
	0xd4, 0x9c, 0x17, 0x34, 0xea, 0x3e, 0x29, 0xbf, 0xbe, 0xac, 0x1a, 0x7f, 0x5e, 0x56, 0x8d, 0xbf,
	0x2f, 0xab, 0xc6, 0xab, 0x37, 0x55, 0xe3, 0xf5, 0x9b, 0xaa, 0xf1, 0x5d, 0x6e, 0x50, 0x6f, 0x15,
	0x04, 0xe4, 0x7f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xc2, 0xe0, 0xd5, 0x53, 0x0c, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagerServiceClient interface {
	Create(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v12.JobProfile, error)
	Run(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v12.JobProfile, error)
	Stop(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v12.JobProfile, error)
	Get(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v12.JobProfile, error)
	Update(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*v12.JobProfile, error)
	Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
	UpdateStatus(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*types.Empty, error)
	VerifyChunk(ctx context.Context, in *VerifyChunkRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ChunkCreated(ctx context.Context, in *ChunkCreatedRequest, opts ...grpc.CallOption) (*types.Empty, error)
	CheckBalance(ctx context.Context, in *CheckBalanceRequest, opts ...grpc.CallOption) (*CheckBalanceResponse, error)
	GetProfiles(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.Profiles, error)
	GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*v1.Profile, error)
	RegisterTranscoder(ctx context.Context, in *v11.Transcoder, opts ...grpc.CallOption) (*types.Empty, error)
	GetWork(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v11.Assignment, error)
}

type managerServiceClient struct {
	cc *grpc.ClientConn
}

func NewManagerServiceClient(cc *grpc.ClientConn) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) Create(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v12.JobProfile, error) {
	out := new(v12.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) Run(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v12.JobProfile, error) {
	out := new(v12.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) Stop(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v12.JobProfile, error) {
	out := new(v12.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) Get(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v12.JobProfile, error) {
	out := new(v12.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) Update(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*v12.JobProfile, error) {
	out := new(v12.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateStatus(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) VerifyChunk(ctx context.Context, in *VerifyChunkRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/VerifyChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ChunkCreated(ctx context.Context, in *ChunkCreatedRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/ChunkCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CheckBalance(ctx context.Context, in *CheckBalanceRequest, opts ...grpc.CallOption) (*CheckBalanceResponse, error) {
	out := new(CheckBalanceResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/CheckBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetProfiles(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1.Profiles, error) {
	out := new(v1.Profiles)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/GetProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*v1.Profile, error) {
	out := new(v1.Profile)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) RegisterTranscoder(ctx context.Context, in *v11.Transcoder, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/RegisterTranscoder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetWork(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v11.Assignment, error) {
	out := new(v11.Assignment)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
type ManagerServiceServer interface {
	Create(context.Context, *JobRequest) (*v12.JobProfile, error)
	Run(context.Context, *JobRequest) (*v12.JobProfile, error)
	Stop(context.Context, *JobRequest) (*v12.JobProfile, error)
	Get(context.Context, *JobRequest) (*v12.JobProfile, error)
	Update(context.Context, *UpdateJobRequest) (*v12.JobProfile, error)
	Health(context.Context, *types.Empty) (*rpc.HealthStatus, error)
	UpdateStatus(context.Context, *UpdateJobRequest) (*types.Empty, error)
	VerifyChunk(context.Context, *VerifyChunkRequest) (*types.Empty, error)
	ChunkCreated(context.Context, *ChunkCreatedRequest) (*types.Empty, error)
	CheckBalance(context.Context, *CheckBalanceRequest) (*CheckBalanceResponse, error)
	GetProfiles(context.Context, *types.Empty) (*v1.Profiles, error)
	GetProfile(context.Context, *ProfileRequest) (*v1.Profile, error)
	RegisterTranscoder(context.Context, *v11.Transcoder) (*types.Empty, error)
	GetWork(context.Context, *types.Empty) (*v11.Assignment, error)
}

func RegisterManagerServiceServer(s *grpc.Server, srv ManagerServiceServer) {
	s.RegisterService(&_ManagerService_serviceDesc, srv)
}

func _ManagerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Create(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Run(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Stop(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Get(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Update(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Health(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateStatus(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_VerifyChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).VerifyChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/VerifyChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).VerifyChunk(ctx, req.(*VerifyChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ChunkCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkCreatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ChunkCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/ChunkCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ChunkCreated(ctx, req.(*ChunkCreatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CheckBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CheckBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/CheckBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CheckBalance(ctx, req.(*CheckBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/GetProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetProfiles(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_RegisterTranscoder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.Transcoder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).RegisterTranscoder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/RegisterTranscoder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).RegisterTranscoder(ctx, req.(*v11.Transcoder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetWork(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.manager.v1.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ManagerService_Create_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _ManagerService_Run_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ManagerService_Stop_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ManagerService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ManagerService_Update_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _ManagerService_Health_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _ManagerService_UpdateStatus_Handler,
		},
		{
			MethodName: "VerifyChunk",
			Handler:    _ManagerService_VerifyChunk_Handler,
		},
		{
			MethodName: "ChunkCreated",
			Handler:    _ManagerService_ChunkCreated_Handler,
		},
		{
			MethodName: "CheckBalance",
			Handler:    _ManagerService_CheckBalance_Handler,
		},
		{
			MethodName: "GetProfiles",
			Handler:    _ManagerService_GetProfiles_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ManagerService_GetProfile_Handler,
		},
		{
			MethodName: "RegisterTranscoder",
			Handler:    _ManagerService_RegisterTranscoder_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _ManagerService_GetWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager/v1/manager.proto",
}

func (m *ProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProfileId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.ProfileId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.ContractAddress)))
		i += copy(dAtA[i:], m.ContractAddress)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Balance != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Balance))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContractAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PipelineId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.PipelineId)))
		i += copy(dAtA[i:], m.PipelineId)
	}
	if len(m.ContractAddress) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.ContractAddress)))
		i += copy(dAtA[i:], m.ContractAddress)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VerifyChunkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyChunkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StreamId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.StreamId))
	}
	if m.SourceChunkId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.SourceChunkId))
	}
	if m.ResultChunkId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.ResultChunkId))
	}
	if m.HashDistance != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.HashDistance))
	}
	if m.Bitrate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.Bitrate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChunkCreatedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkCreatedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StreamId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.StreamId))
	}
	if m.SourceChunkId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.SourceChunkId))
	}
	if m.ResultChunkId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.ResultChunkId))
	}
	if m.Bitrate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.Bitrate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TranscoderStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TranscoderStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TranscoderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.TranscoderId)))
		i += copy(dAtA[i:], m.TranscoderId)
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.ProfileId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.ProfileId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateJobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateJobRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.ProfileId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.ProfileId))
	}
	if len(m.ClientAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.ClientAddress)))
		i += copy(dAtA[i:], m.ClientAddress)
	}
	if m.StreamId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.StreamId))
	}
	if len(m.StreamAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.StreamAddress)))
		i += copy(dAtA[i:], m.StreamAddress)
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.Status))
	}
	if m.InputStatus != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.InputStatus))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintManager(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProfileId != 0 {
		n += 1 + sovManager(uint64(m.ProfileId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Balance != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContractAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PipelineId)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyChunkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovManager(uint64(m.StreamId))
	}
	if m.SourceChunkId != 0 {
		n += 1 + sovManager(uint64(m.SourceChunkId))
	}
	if m.ResultChunkId != 0 {
		n += 1 + sovManager(uint64(m.ResultChunkId))
	}
	if m.HashDistance != 0 {
		n += 1 + sovManager(uint64(m.HashDistance))
	}
	if m.Bitrate != 0 {
		n += 1 + sovManager(uint64(m.Bitrate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChunkCreatedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovManager(uint64(m.StreamId))
	}
	if m.SourceChunkId != 0 {
		n += 1 + sovManager(uint64(m.SourceChunkId))
	}
	if m.ResultChunkId != 0 {
		n += 1 + sovManager(uint64(m.ResultChunkId))
	}
	if m.Bitrate != 0 {
		n += 1 + sovManager(uint64(m.Bitrate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TranscoderStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TranscoderId)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovManager(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	if m.ProfileId != 0 {
		n += 1 + sovManager(uint64(m.ProfileId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateJobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	if m.ProfileId != 0 {
		n += 1 + sovManager(uint64(m.ProfileId))
	}
	l = len(m.ClientAddress)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	if m.StreamId != 0 {
		n += 1 + sovManager(uint64(m.StreamId))
	}
	l = len(m.StreamAddress)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovManager(uint64(m.Status))
	}
	if m.InputStatus != 0 {
		n += 1 + sovManager(uint64(m.InputStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovManager(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozManager(x uint64) (n int) {
	return sovManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			m.ProfileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileId |= (v1.ProfileId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Balance = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PipelineId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyChunkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyChunkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyChunkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChunkId", wireType)
			}
			m.SourceChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChunkId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultChunkId", wireType)
			}
			m.ResultChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultChunkId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashDistance", wireType)
			}
			m.HashDistance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HashDistance |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitrate", wireType)
			}
			m.Bitrate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bitrate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkCreatedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkCreatedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkCreatedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChunkId", wireType)
			}
			m.SourceChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChunkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultChunkId", wireType)
			}
			m.ResultChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultChunkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitrate", wireType)
			}
			m.Bitrate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bitrate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TranscoderStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TranscoderStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TranscoderStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscoderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranscoderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (v11.TranscoderStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			m.ProfileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileId |= (v1.ProfileId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateJobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateJobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateJobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			m.ProfileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileId |= (v1.ProfileId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (v12.JobStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStatus", wireType)
			}
			m.InputStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputStatus |= (v12.InputStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthManager
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowManager
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipManager(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthManager = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManager   = fmt.Errorf("proto: integer overflow")
)

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transcoder/v1/transcoder.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on Transcoder with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Transcoder) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CpuCores

	// no validation rules for CpuMhz

	// no validation rules for TotalMemory

	// no validation rules for Status

	// no validation rules for Worker

	return nil
}

// TranscoderValidationError is the validation error returned by
// Transcoder.Validate if the designated constraints aren't met.
type TranscoderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranscoderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranscoderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranscoderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranscoderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranscoderValidationError) ErrorName() string { return "TranscoderValidationError" }

// Error satisfies the builtin error interface
func (e TranscoderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranscoder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranscoderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranscoderValidationError{}

// Validate checks the field values on Assignment with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Assignment) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetWorkorder() == nil {
		return AssignmentValidationError{
			field:  "Workorder",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetWorkorder()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return AssignmentValidationError{
					field:  "Workorder",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	if m.GetProfile() == nil {
		return AssignmentValidationError{
			field:  "Profile",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetProfile()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return AssignmentValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// AssignmentValidationError is the validation error returned by
// Assignment.Validate if the designated constraints aren't met.
type AssignmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignmentValidationError) ErrorName() string { return "AssignmentValidationError" }

// Error satisfies the builtin error interface
func (e AssignmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignmentValidationError{}

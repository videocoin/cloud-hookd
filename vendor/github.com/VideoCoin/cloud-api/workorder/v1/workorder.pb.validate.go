// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: workorder/v1/workorder.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on WorkOrder with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *WorkOrder) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for PipelineId

	// no validation rules for TranscoderId

	// no validation rules for ProfileId

	// no validation rules for ClientAddress

	// no validation rules for StreamAddress

	// no validation rules for StreamId

	// no validation rules for TranscodeInputUrl

	// no validation rules for IngestInputUrl

	// no validation rules for TranscodeOutputUrl

	// no validation rules for Status

	// no validation rules for Chunks

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Worker

	// no validation rules for Refunded

	// no validation rules for IngestStatus

	// no validation rules for StreamHash

	return nil
}

// WorkOrderValidationError is the validation error returned by
// WorkOrder.Validate if the designated constraints aren't met.
type WorkOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkOrderValidationError) ErrorName() string { return "WorkOrderValidationError" }

// Error satisfies the builtin error interface
func (e WorkOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkOrderValidationError{}

// Validate checks the field values on JobProfile with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *JobProfile) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for PipelineId

	// no validation rules for ProfileId

	// no validation rules for IngestInputUrl

	// no validation rules for TranscodeOutputUrl

	// no validation rules for ClientAddress

	// no validation rules for StreamId

	// no validation rules for StreamAddress

	// no validation rules for Status

	// no validation rules for IngestStatus

	return nil
}

// JobProfileValidationError is the validation error returned by
// JobProfile.Validate if the designated constraints aren't met.
type JobProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobProfileValidationError) ErrorName() string { return "JobProfileValidationError" }

// Error satisfies the builtin error interface
func (e JobProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobProfileValidationError{}

// Validate checks the field values on JobProfiles with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JobProfiles) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetJobProfiles() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return JobProfilesValidationError{
						field:  fmt.Sprintf("JobProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// JobProfilesValidationError is the validation error returned by
// JobProfiles.Validate if the designated constraints aren't met.
type JobProfilesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobProfilesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobProfilesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobProfilesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobProfilesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobProfilesValidationError) ErrorName() string { return "JobProfilesValidationError" }

// Error satisfies the builtin error interface
func (e JobProfilesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobProfiles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobProfilesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobProfilesValidationError{}
